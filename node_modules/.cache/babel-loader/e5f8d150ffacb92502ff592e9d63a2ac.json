{"ast":null,"code":"import _objectSpread from \"/Users/sarp.usulu/Desktop/react_trades_exercise/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/sarp.usulu/Desktop/react_trades_exercise/src/new_trade_form/new_trade_form.tsx\";\nimport React, { Component } from \"react\";\nimport css_classes from \"./new_trade_form.module.css\";\nimport axios from \"axios\";\n\nclass NewTradeForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      trade_form: {\n        symbol: \"\",\n        time: \"\",\n        quantity: 0,\n        price: 0\n      },\n      trade_form_filled: false\n    };\n\n    this.save_exit_handler = () => {\n      //TODO: MAKE A POST REQUEST WITH THE FORM INPUT\n      // this.props.dataFetcher.bind(this);\n      this.submitForm();\n      this.props.history.push(\"/\");\n    };\n\n    this.save_add_another_handler = () => {\n      //TODO: MAKE A POST REQUEST WITH THE FORM INPUT\n      // this.props.dataFetcher.bind(this);\n      this.submitForm();\n      this.props.history.push(\"/addTrade\");\n    };\n\n    this.exit_handler = () => {\n      this.props.history.push(\"/\");\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      //create a copy of the current state trade_form\n      const updated_trade_form = _objectSpread({}, this.state.trade_form); //update that copy\n\n\n      updated_trade_form[inputIdentifier] = event.target.value; //update the state trade_form\n\n      this.setState({\n        trade_form: updated_trade_form\n      }); //checking if all the form fields are truthy, set a flag to render the color of submit buttons\n\n      if (this.state.trade_form.symbol && this.state.trade_form.time && this.state.trade_form.quantity && this.state.trade_form.price) {\n        // this.setState(() => { this.state.trade_form_filled = true });\n        this.setState({\n          trade_form_filled: true\n        });\n      } else {\n        // this.setState(() => { this.state.trade_form_filled = false });\n        this.setState({\n          trade_form_filled: false\n        });\n      } // console.log(this.state);\n\n    };\n  }\n\n  componentDidUpdate() {\n    //checking if all the form fields are truthy\n    let conditions_array = Object.values(this.state.trade_form);\n    let conditions_all_true = conditions_array.every(elem => {\n      return elem;\n    }); //based on the conditions set a flag to activate or deactivate submit buttons\n\n    if (conditions_all_true && !this.state.trade_form_filled) {\n      this.setState({\n        trade_form_filled: true\n      });\n    }\n\n    if (!conditions_all_true && this.state.trade_form_filled) {\n      this.setState({\n        trade_form_filled: false\n      });\n    }\n\n    console.log(this.state);\n  }\n\n  submitForm() {\n    console.log(\"form submit called!\");\n    axios.post(\"http://localhost:5000/api/trades\", {\n      symbol: this.state.trade_form.symbol,\n      time: this.state.trade_form.time,\n      quantity: this.state.trade_form.quantity,\n      price: this.state.trade_form.price\n    }).then(response => console.log(response));\n  }\n\n  render() {\n    //generate possible ticker options for the form selection dropdown\n    const symbol_dropdown_options = this.props.symbols.map(symbol => {\n      return React.createElement(\"option\", {\n        value: symbol,\n        key: symbol,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, symbol);\n    });\n    return React.createElement(\"div\", {\n      className: css_classes.new_trade_form,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      onSubmit: this.submitForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"symbols\",\n      style: {\n        display: \"block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Symbol\"), React.createElement(\"select\", {\n      name: \"symbols\",\n      placeholder: \"Select\",\n      className: css_classes.input_box,\n      onChange: event => this.inputChangedHandler(event, \"symbol\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"\",\n      disabled: true,\n      selected: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Select\"), symbol_dropdown_options), React.createElement(\"label\", {\n      htmlFor: \"execution_time\",\n      style: {\n        display: \"block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Time\"), React.createElement(\"input\", {\n      name: \"execution_time\",\n      type: \"text\",\n      placeholder: \"Execution Time e.g 00:00:00 AM\",\n      className: css_classes.input_box,\n      onChange: event => this.inputChangedHandler(event, \"time\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"num_shares\",\n      style: {\n        display: \"block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Quantity\"), React.createElement(\"input\", {\n      name: \"num_shares\",\n      type: \"numeric\",\n      placeholder: \"Number of shares\",\n      className: css_classes.input_box,\n      onChange: event => this.inputChangedHandler(event, \"quantity\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"price_per_share\",\n      style: {\n        display: \"block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Price\"), React.createElement(\"input\", {\n      name: \"price_per_share\",\n      type: \"numeric\",\n      step: \"any\",\n      placeholder: \"Price per share\",\n      className: css_classes.input_box,\n      onChange: event => this.inputChangedHandler(event, \"price\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: css_classes.button_div,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.save_exit_handler,\n      className: this.state.trade_form_filled ? css_classes.active_green_button : css_classes.inactive_gray_button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Save & Exit\"), React.createElement(\"button\", {\n      onClick: this.save_add_another_handler,\n      className: this.state.trade_form_filled ? css_classes.active_green_button : css_classes.inactive_gray_button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Save & Add Another\"), React.createElement(\"button\", {\n      onClick: this.exit_handler,\n      className: css_classes.active_green_button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Exit\"))));\n  }\n\n}\n\nexport default NewTradeForm;","map":{"version":3,"sources":["/Users/sarp.usulu/Desktop/react_trades_exercise/src/new_trade_form/new_trade_form.tsx"],"names":["React","Component","css_classes","axios","NewTradeForm","state","trade_form","symbol","time","quantity","price","trade_form_filled","save_exit_handler","submitForm","props","history","push","save_add_another_handler","exit_handler","inputChangedHandler","event","inputIdentifier","updated_trade_form","target","value","setState","componentDidUpdate","conditions_array","Object","values","conditions_all_true","every","elem","console","log","post","then","response","render","symbol_dropdown_options","symbols","map","new_trade_form","display","input_box","button_div","active_green_button","inactive_gray_button"],"mappings":"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","sourcesContent":["import React, { Component, ChangeEvent } from \"react\";\nimport css_classes from \"./new_trade_form.module.css\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport axios from \"axios\";\n\ninterface IProps extends RouteComponentProps {\n  symbols: string[];\n  dataFetcher: ()=>void;\n}\n\ninterface IState {\n  trade_form: {\n    symbol: string;\n    time: string;\n    quantity: number;\n    price: number;\n    [key: string]: any;\n  };\n  trade_form_filled: boolean;\n}\n\nclass NewTradeForm extends Component<IProps, IState> {\n  state = {\n    trade_form: {\n      symbol: \"\",\n      time: \"\",\n      quantity: 0,\n      price: 0\n    },\n    trade_form_filled: false\n  };\n\n  componentDidUpdate() {\n    //checking if all the form fields are truthy\n    let conditions_array = Object.values(this.state.trade_form);\n    let conditions_all_true = conditions_array.every(elem => {\n      return elem;\n    });\n\n    //based on the conditions set a flag to activate or deactivate submit buttons\n    if (conditions_all_true && !this.state.trade_form_filled) {\n      this.setState({ trade_form_filled: true });\n    }\n    if (!conditions_all_true && this.state.trade_form_filled) {\n      this.setState({ trade_form_filled: false });\n    }\n    console.log(this.state);\n  }\n\n  submitForm() {\n\n    console.log(\"form submit called!\");\n    axios.post(\"http://localhost:5000/api/trades\", \n    {\n        symbol: this.state.trade_form.symbol,\n        time: this.state.trade_form.time,\n        quantity: this.state.trade_form.quantity,\n        price: this.state.trade_form.price\n    }\n    )\n    .then(response => console.log(response));\n  }\n\n  save_exit_handler = () => {\n    //TODO: MAKE A POST REQUEST WITH THE FORM INPUT\n    // this.props.dataFetcher.bind(this);\n    this.submitForm()\n    this.props.history.push(\"/\");\n  };\n\n  save_add_another_handler = () => {\n    //TODO: MAKE A POST REQUEST WITH THE FORM INPUT\n    // this.props.dataFetcher.bind(this);\n    this.submitForm()\n    this.props.history.push(\"/addTrade\");\n  };\n\n  exit_handler = () => {\n    this.props.history.push(\"/\");\n  };\n\n  inputChangedHandler = (\n    event: ChangeEvent,\n    inputIdentifier: keyof IState[\"trade_form\"]\n  ) => {\n    //create a copy of the current state trade_form\n    const updated_trade_form: IState[\"trade_form\"] = {\n      ...this.state.trade_form\n    };\n\n    //update that copy\n\n    updated_trade_form[\n      inputIdentifier\n    ] = (event.target as HTMLInputElement).value;\n\n    //update the state trade_form\n    this.setState({\n      trade_form: updated_trade_form\n    });\n\n    //checking if all the form fields are truthy, set a flag to render the color of submit buttons\n    if (\n      this.state.trade_form.symbol &&\n      this.state.trade_form.time &&\n      this.state.trade_form.quantity &&\n      this.state.trade_form.price\n    ) {\n      // this.setState(() => { this.state.trade_form_filled = true });\n      this.setState({ trade_form_filled: true });\n    } else {\n      // this.setState(() => { this.state.trade_form_filled = false });\n      this.setState({ trade_form_filled: false });\n    }\n    // console.log(this.state);\n  };\n\n  render() {\n    //generate possible ticker options for the form selection dropdown\n    const symbol_dropdown_options = this.props.symbols.map(symbol => {\n      return (\n        <option value={symbol} key={symbol}>\n          {symbol}\n        </option>\n      );\n    });\n\n    return (\n      <div className={css_classes.new_trade_form}>\n        <div></div>\n        <form onSubmit={this.submitForm}>\n          <label htmlFor=\"symbols\" style={{ display: \"block\" }}>\n            Symbol\n          </label>\n          <select\n            name=\"symbols\"\n            placeholder=\"Select\"\n            className={css_classes.input_box}\n            onChange={event => this.inputChangedHandler(event, \"symbol\")}\n          >\n            <option value=\"\" disabled selected>\n              Select\n            </option>\n            {symbol_dropdown_options}\n          </select>\n\n          <label htmlFor=\"execution_time\" style={{ display: \"block\" }}>\n            Time\n          </label>\n          <input\n            name=\"execution_time\"\n            type=\"text\"\n            placeholder=\"Execution Time e.g 00:00:00 AM\"\n            className={css_classes.input_box}\n            onChange={event => this.inputChangedHandler(event, \"time\")}\n          ></input>\n\n          <label htmlFor=\"num_shares\" style={{ display: \"block\" }}>\n            Quantity\n          </label>\n          <input\n            name=\"num_shares\"\n            type=\"numeric\"\n            placeholder=\"Number of shares\"\n            className={css_classes.input_box}\n            onChange={event => this.inputChangedHandler(event, \"quantity\")}\n          ></input>\n\n          <label htmlFor=\"price_per_share\" style={{ display: \"block\" }}>\n            Price\n          </label>\n          <input\n            name=\"price_per_share\"\n            type=\"numeric\"\n            step=\"any\"\n            placeholder=\"Price per share\"\n            className={css_classes.input_box}\n            onChange={event => this.inputChangedHandler(event, \"price\")}\n          ></input>\n\n          <br></br>\n\n          <div className={css_classes.button_div}>\n            <button\n              onClick={this.save_exit_handler}\n              className={\n                this.state.trade_form_filled\n                  ? css_classes.active_green_button\n                  : css_classes.inactive_gray_button\n              }\n            >\n              Save & Exit\n            </button>\n\n            <button\n              onClick={this.save_add_another_handler}\n              className={\n                this.state.trade_form_filled\n                  ? css_classes.active_green_button\n                  : css_classes.inactive_gray_button\n              }\n            >\n              Save & Add Another\n            </button>\n\n            <button\n              onClick={this.exit_handler}\n              className={css_classes.active_green_button}\n            >\n              Exit\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default NewTradeForm;\n"]},"metadata":{},"sourceType":"module"}