{"ast":null,"code":"var _jsxFileName = \"/Users/sarp.usulu/Desktop/react_trades_exercise/src/App.tsx\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport _ from \"lodash\";\nimport PieChart from \"./highcharts/highcharts_pie\";\nimport SymbolGrid from \"./agGrid/agGrid\";\nimport NewTradeForm from \"./new_trade_form/new_trade_form\";\nimport { Route, BrowserRouter } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { ClassicSpinner } from \"react-spinners-kit\";\n\nclass App extends Component {\n  // state = {\n  //   trades_data: null,\n  //   portfolio_sorted: null,\n  //   symbols: null,\n  //   percentages: null,\n  //   amounts: null,\n  //   quantities: null\n  // };\n  constructor(props) {\n    super(props);\n    this.state = void 0;\n    this.state = {\n      trades_data: [{\n        symbol: \"GOOGL\",\n        qty: 621,\n        price: 25.15590870261679,\n        time: \"3:06:07 AM\"\n      }],\n      portfolio_sorted: [{\n        symbol: \"GOOGL\",\n        qty: 621,\n        price: 25.15590870261679,\n        time: \"3:06:07 AM\"\n      }],\n      symbols: [],\n      percentages: [],\n      amounts: [],\n      quantities: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"http://localhost:5000/api/trades\").then(response => {\n      //fet raw data which has symbol, percentage, quantity and price fields\n      let trades_data = response.data; //add the amount field for each trade\n\n      for (let trade of trades_data) {\n        trade.amount = trade.qty * trade.price;\n      }\n\n      let portfolio_summed;\n      portfolio_summed = _(trades_data).groupBy(\"symbol\").map((objs, key) => {\n        return {\n          symbol: key,\n          qty: _.sumBy(objs, \"qty\"),\n          amount: _.sumBy(objs, \"amount\")\n        };\n      }).value(); //calculate the total size of the portfolio in dollars\n\n      let total_amount = 0;\n\n      for (const elem of portfolio_summed) {\n        total_amount = total_amount + elem.amount;\n      } //calculate the percentage of each element in the portfolio\n\n\n      for (let elem of portfolio_summed) {\n        elem.percentage = elem.amount / total_amount * 100;\n      } //sort the portfolio-wise values first by percentage then by the symbol name alphabetically\n\n\n      let portfolio_sorted = _.orderBy(portfolio_summed, [\"percentage\", \"symbol\"], [\"desc\", \"desc\"]); //get arrays of values to be sent as props to highcharts\n\n\n      let symbols = [...portfolio_sorted.map(x => x.symbol)];\n      let percentages = [...portfolio_sorted.map(x => x.percentage)];\n      let amounts = [...portfolio_sorted.map(x => x.amount)];\n      let quantities = [...portfolio_sorted.map(x => x.qty)]; //update the state with raw incoming data and arrays describing the portfolio\n\n      this.setState({\n        trades_data: trades_data,\n        symbols: symbols,\n        percentages: percentages,\n        amounts: amounts,\n        quantities: quantities\n      });\n    });\n  }\n\n  render() {\n    if (this.state.trades_data.length !== 1) {\n      return React.createElement(BrowserRouter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"TRADE\"), React.createElement(\"span\", {\n        style: {\n          color: 'maroon'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"49\")), React.createElement(Route, {\n        path: \"/\",\n        exact: true,\n        render: routeProps => React.createElement(PieChart, Object.assign({}, routeProps, {\n          symbols: this.state.symbols,\n          percentages: this.state.percentages,\n          amounts: this.state.amounts,\n          quantities: this.state.quantities,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/addTrade\",\n        exact: true,\n        render: routeProps => React.createElement(NewTradeForm, Object.assign({}, routeProps, {\n          symbols: this.state.symbols,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/detail/:symbol\",\n        exact: true,\n        render: routeProps => React.createElement(SymbolGrid, Object.assign({}, routeProps, {\n          trades: this.state.trades_data,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      })));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"spinner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(ClassicSpinner, {\n        size: 40,\n        color: \"#686769\",\n        loading: true // style={{width: \"300px\"}}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }));\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sarp.usulu/Desktop/react_trades_exercise/src/App.tsx"],"names":["React","Component","_","PieChart","SymbolGrid","NewTradeForm","Route","BrowserRouter","axios","ClassicSpinner","App","constructor","props","state","trades_data","symbol","qty","price","time","portfolio_sorted","symbols","percentages","amounts","quantities","componentDidMount","get","then","response","data","trade","amount","portfolio_summed","groupBy","map","objs","key","sumBy","value","total_amount","elem","percentage","orderBy","x","setState","render","length","color","routeProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport _ from \"lodash\";\nimport PieChart from \"./highcharts/highcharts_pie\";\nimport SymbolGrid from \"./agGrid/agGrid\";\nimport NewTradeForm from \"./new_trade_form/new_trade_form\";\nimport { Route, BrowserRouter } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { ClassicSpinner } from \"react-spinners-kit\";\nimport { RouteComponentProps } from 'react-router-dom';\n\n\n\ninterface IState {\n  trades_data: {symbol: string, qty: number, price:number, time: string}[],\n  portfolio_sorted: {symbol: string, qty: number, price:number, time:string, amount?:number, percentage?:number}[],\n  symbols: string[],\n  percentages: number[],\n  amounts: number[],\n  quantities: number[] \n}\n\nclass App extends Component<RouteComponentProps, IState> {\n  // state = {\n  //   trades_data: null,\n  //   portfolio_sorted: null,\n  //   symbols: null,\n  //   percentages: null,\n  //   amounts: null,\n  //   quantities: null\n  // };\n\n\n  public state: IState;\n\n  constructor(props:RouteComponentProps){\n    super(props);\n      this.state = {\n        trades_data: [{\n          symbol: \"GOOGL\",\n          qty: 621,\n          price: 25.15590870261679,\n          time: \"3:06:07 AM\"\n        }],\n        portfolio_sorted: [{\n          symbol: \"GOOGL\",\n          qty: 621,\n          price: 25.15590870261679,\n          time: \"3:06:07 AM\"\n        }],\n        symbols: [],\n        percentages: [],\n        amounts: [],\n        quantities: []\n      }\n  }\n    \n  componentDidMount() {\n    axios.get(\"http://localhost:5000/api/trades\").then(response => {\n      //fet raw data which has symbol, percentage, quantity and price fields\n      let trades_data:IState[\"portfolio_sorted\"] = response.data;\n      //add the amount field for each trade\n      for (let trade of trades_data) {\n        trade.amount = trade.qty * trade.price;\n      }\n\n\n      let portfolio_summed: {symbol: string, qty: number, amount:number, percentage?:number}[];\n      portfolio_summed = _(trades_data)\n        .groupBy(\"symbol\")\n        .map((objs, key) => {\n          return {\n            symbol: key,\n            qty: _.sumBy(objs, \"qty\"),\n            amount: _.sumBy(objs, \"amount\")\n          };\n        })\n        .value();\n\n      //calculate the total size of the portfolio in dollars\n      let total_amount = 0;\n      for (const elem of portfolio_summed) {\n        total_amount = total_amount + elem.amount;\n      }\n\n      //calculate the percentage of each element in the portfolio\n      for (let elem of portfolio_summed) {\n        elem.percentage = (elem.amount / total_amount) * 100;\n      }\n\n      //sort the portfolio-wise values first by percentage then by the symbol name alphabetically\n      let portfolio_sorted = _.orderBy(\n        portfolio_summed,\n        [\"percentage\", \"symbol\"],\n        [\"desc\", \"desc\"]\n      );\n\n      //get arrays of values to be sent as props to highcharts\n      let symbols: string[] = [...portfolio_sorted.map(x => x.symbol)];\n      let percentages: number[] = [...portfolio_sorted.map(x => x.percentage)] as number[];\n      let amounts: number[] = [...portfolio_sorted.map(x => x.amount)];\n      let quantities: number[] = [...portfolio_sorted.map(x => x.qty)];\n\n      //update the state with raw incoming data and arrays describing the portfolio\n      this.setState(\n        {\n          trades_data: trades_data,\n          symbols: symbols,\n          percentages: percentages,\n          amounts: amounts,\n          quantities: quantities\n        }\n      );\n    });\n  }\n\n\n  render() {\n    if (this.state.trades_data.length !== 1) {\n      return (\n        <BrowserRouter>\n          <div className=\"App\">\n            <h1><span>TRADE</span><span style={{ color: 'maroon' }}>49</span></h1>\n\n            <Route\n              path=\"/\"\n              exact\n              render={routeProps => (\n                <PieChart\n                  {...routeProps}\n                  symbols={this.state.symbols}\n                  percentages={this.state.percentages}\n                  amounts={this.state.amounts}\n                  quantities={this.state.quantities}\n                />\n              )}\n            />\n            <Route\n              path=\"/addTrade\"\n              exact\n              render={routeProps => (\n                <NewTradeForm {...routeProps} symbols={this.state.symbols} />\n              )}\n            />\n            <Route\n              path=\"/detail/:symbol\"\n              exact\n              render={routeProps => (\n                <SymbolGrid {...routeProps} trades={this.state.trades_data} />\n              )}\n            />\n          </div>\n        </BrowserRouter>\n      );\n    }\n    else{\n      return(\n      <div className=\"spinner\">\n        <ClassicSpinner \n          size={40}\n          color=\"#686769\"\n          loading={true}\n          // style={{width: \"300px\"}}\n        />\n      </div>    \n      )\n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}